#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 't_container_service_types'

module TContainerService
  class Client
    include ::Thrift::Client

    def GetInfo(req)
      send_GetInfo(req)
      return recv_GetInfo()
    end

    def send_GetInfo(req)
      send_message('GetInfo', GetInfo_args, :req => req)
    end

    def recv_GetInfo()
      result = receive_message(GetInfo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetInfo failed: unknown result')
    end

    def ExecuteStatement(req)
      send_ExecuteStatement(req)
      return recv_ExecuteStatement()
    end

    def send_ExecuteStatement(req)
      send_message('ExecuteStatement', ExecuteStatement_args, :req => req)
    end

    def recv_ExecuteStatement()
      result = receive_message(ExecuteStatement_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ExecuteStatement failed: unknown result')
    end

    def GetOperationStatus(req)
      send_GetOperationStatus(req)
      return recv_GetOperationStatus()
    end

    def send_GetOperationStatus(req)
      send_message('GetOperationStatus', GetOperationStatus_args, :req => req)
    end

    def recv_GetOperationStatus()
      result = receive_message(GetOperationStatus_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetOperationStatus failed: unknown result')
    end

    def CancelOperation(req)
      send_CancelOperation(req)
      return recv_CancelOperation()
    end

    def send_CancelOperation(req)
      send_message('CancelOperation', CancelOperation_args, :req => req)
    end

    def recv_CancelOperation()
      result = receive_message(CancelOperation_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'CancelOperation failed: unknown result')
    end

    def CloseOperation(req)
      send_CloseOperation(req)
      return recv_CloseOperation()
    end

    def send_CloseOperation(req)
      send_message('CloseOperation', CloseOperation_args, :req => req)
    end

    def recv_CloseOperation()
      result = receive_message(CloseOperation_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'CloseOperation failed: unknown result')
    end

    def GetResultSetMetadata(req)
      send_GetResultSetMetadata(req)
      return recv_GetResultSetMetadata()
    end

    def send_GetResultSetMetadata(req)
      send_message('GetResultSetMetadata', GetResultSetMetadata_args, :req => req)
    end

    def recv_GetResultSetMetadata()
      result = receive_message(GetResultSetMetadata_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetResultSetMetadata failed: unknown result')
    end

    def FetchResults(req)
      send_FetchResults(req)
      return recv_FetchResults()
    end

    def send_FetchResults(req)
      send_message('FetchResults', FetchResults_args, :req => req)
    end

    def recv_FetchResults()
      result = receive_message(FetchResults_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'FetchResults failed: unknown result')
    end

    def GetQueryId(req)
      send_GetQueryId(req)
      return recv_GetQueryId()
    end

    def send_GetQueryId(req)
      send_message('GetQueryId', GetQueryId_args, :req => req)
    end

    def recv_GetQueryId()
      result = receive_message(GetQueryId_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetQueryId failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_GetInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetInfo_args)
      result = GetInfo_result.new()
      result.success = @handler.GetInfo(args.req)
      write_result(result, oprot, 'GetInfo', seqid)
    end

    def process_ExecuteStatement(seqid, iprot, oprot)
      args = read_args(iprot, ExecuteStatement_args)
      result = ExecuteStatement_result.new()
      result.success = @handler.ExecuteStatement(args.req)
      write_result(result, oprot, 'ExecuteStatement', seqid)
    end

    def process_GetOperationStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetOperationStatus_args)
      result = GetOperationStatus_result.new()
      result.success = @handler.GetOperationStatus(args.req)
      write_result(result, oprot, 'GetOperationStatus', seqid)
    end

    def process_CancelOperation(seqid, iprot, oprot)
      args = read_args(iprot, CancelOperation_args)
      result = CancelOperation_result.new()
      result.success = @handler.CancelOperation(args.req)
      write_result(result, oprot, 'CancelOperation', seqid)
    end

    def process_CloseOperation(seqid, iprot, oprot)
      args = read_args(iprot, CloseOperation_args)
      result = CloseOperation_result.new()
      result.success = @handler.CloseOperation(args.req)
      write_result(result, oprot, 'CloseOperation', seqid)
    end

    def process_GetResultSetMetadata(seqid, iprot, oprot)
      args = read_args(iprot, GetResultSetMetadata_args)
      result = GetResultSetMetadata_result.new()
      result.success = @handler.GetResultSetMetadata(args.req)
      write_result(result, oprot, 'GetResultSetMetadata', seqid)
    end

    def process_FetchResults(seqid, iprot, oprot)
      args = read_args(iprot, FetchResults_args)
      result = FetchResults_result.new()
      result.success = @handler.FetchResults(args.req)
      write_result(result, oprot, 'FetchResults', seqid)
    end

    def process_GetQueryId(seqid, iprot, oprot)
      args = read_args(iprot, GetQueryId_args)
      result = GetQueryId_result.new()
      result.success = @handler.GetQueryId(args.req)
      write_result(result, oprot, 'GetQueryId', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TGetInfoReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TGetInfoResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ExecuteStatement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TExecuteStatementReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ExecuteStatement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TExecuteStatementResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetOperationStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TGetOperationStatusReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetOperationStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TGetOperationStatusResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelOperation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TCancelOperationReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelOperation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TCancelOperationResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseOperation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TCloseOperationReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseOperation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TCloseOperationResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetResultSetMetadata_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TGetResultSetMetadataReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetResultSetMetadata_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TGetResultSetMetadataResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchResults_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TFetchResultsReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchResults_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TFetchResultsResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetQueryId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQ = 1

    FIELDS = {
      REQ => {:type => ::Thrift::Types::STRUCT, :name => 'req', :class => ::TGetQueryIdReq}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetQueryId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TGetQueryIdResp}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

