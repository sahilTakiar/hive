/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TContainerService_H
#define TContainerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TContainerService_types.h"

namespace apache { namespace hive { namespace service { namespace container { namespace thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TContainerServiceIf {
 public:
  virtual ~TContainerServiceIf() {}
  virtual void GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& _return, const  ::apache::hive::service::rpc::thrift::TGetInfoReq& req) = 0;
  virtual void ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& _return, const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& req) = 0;
  virtual void GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& _return, const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& req) = 0;
  virtual void CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& req) = 0;
  virtual void CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& req) = 0;
  virtual void GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& _return, const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& req) = 0;
  virtual void FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& _return, const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& req) = 0;
  virtual void GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& _return, const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& req) = 0;
};

class TContainerServiceIfFactory {
 public:
  typedef TContainerServiceIf Handler;

  virtual ~TContainerServiceIfFactory() {}

  virtual TContainerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TContainerServiceIf* /* handler */) = 0;
};

class TContainerServiceIfSingletonFactory : virtual public TContainerServiceIfFactory {
 public:
  TContainerServiceIfSingletonFactory(const boost::shared_ptr<TContainerServiceIf>& iface) : iface_(iface) {}
  virtual ~TContainerServiceIfSingletonFactory() {}

  virtual TContainerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TContainerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TContainerServiceIf> iface_;
};

class TContainerServiceNull : virtual public TContainerServiceIf {
 public:
  virtual ~TContainerServiceNull() {}
  void GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TGetInfoReq& /* req */) {
    return;
  }
  void ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& /* req */) {
    return;
  }
  void GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& /* req */) {
    return;
  }
  void CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& /* req */) {
    return;
  }
  void CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& /* req */) {
    return;
  }
  void GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& /* req */) {
    return;
  }
  void FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& /* req */) {
    return;
  }
  void GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& /* _return */, const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& /* req */) {
    return;
  }
};

typedef struct _TContainerService_GetInfo_args__isset {
  _TContainerService_GetInfo_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_GetInfo_args__isset;

class TContainerService_GetInfo_args {
 public:

  TContainerService_GetInfo_args(const TContainerService_GetInfo_args&);
  TContainerService_GetInfo_args& operator=(const TContainerService_GetInfo_args&);
  TContainerService_GetInfo_args() {
  }

  virtual ~TContainerService_GetInfo_args() throw();
   ::apache::hive::service::rpc::thrift::TGetInfoReq req;

  _TContainerService_GetInfo_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TGetInfoReq& val);

  bool operator == (const TContainerService_GetInfo_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_GetInfo_pargs {
 public:


  virtual ~TContainerService_GetInfo_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TGetInfoReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetInfo_result__isset {
  _TContainerService_GetInfo_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetInfo_result__isset;

class TContainerService_GetInfo_result {
 public:

  TContainerService_GetInfo_result(const TContainerService_GetInfo_result&);
  TContainerService_GetInfo_result& operator=(const TContainerService_GetInfo_result&);
  TContainerService_GetInfo_result() {
  }

  virtual ~TContainerService_GetInfo_result() throw();
   ::apache::hive::service::rpc::thrift::TGetInfoResp success;

  _TContainerService_GetInfo_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TGetInfoResp& val);

  bool operator == (const TContainerService_GetInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetInfo_presult__isset {
  _TContainerService_GetInfo_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetInfo_presult__isset;

class TContainerService_GetInfo_presult {
 public:


  virtual ~TContainerService_GetInfo_presult() throw();
   ::apache::hive::service::rpc::thrift::TGetInfoResp* success;

  _TContainerService_GetInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_ExecuteStatement_args__isset {
  _TContainerService_ExecuteStatement_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_ExecuteStatement_args__isset;

class TContainerService_ExecuteStatement_args {
 public:

  TContainerService_ExecuteStatement_args(const TContainerService_ExecuteStatement_args&);
  TContainerService_ExecuteStatement_args& operator=(const TContainerService_ExecuteStatement_args&);
  TContainerService_ExecuteStatement_args() {
  }

  virtual ~TContainerService_ExecuteStatement_args() throw();
   ::apache::hive::service::rpc::thrift::TExecuteStatementReq req;

  _TContainerService_ExecuteStatement_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& val);

  bool operator == (const TContainerService_ExecuteStatement_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_ExecuteStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_ExecuteStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_ExecuteStatement_pargs {
 public:


  virtual ~TContainerService_ExecuteStatement_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_ExecuteStatement_result__isset {
  _TContainerService_ExecuteStatement_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_ExecuteStatement_result__isset;

class TContainerService_ExecuteStatement_result {
 public:

  TContainerService_ExecuteStatement_result(const TContainerService_ExecuteStatement_result&);
  TContainerService_ExecuteStatement_result& operator=(const TContainerService_ExecuteStatement_result&);
  TContainerService_ExecuteStatement_result() {
  }

  virtual ~TContainerService_ExecuteStatement_result() throw();
   ::apache::hive::service::rpc::thrift::TExecuteStatementResp success;

  _TContainerService_ExecuteStatement_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TExecuteStatementResp& val);

  bool operator == (const TContainerService_ExecuteStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_ExecuteStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_ExecuteStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_ExecuteStatement_presult__isset {
  _TContainerService_ExecuteStatement_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_ExecuteStatement_presult__isset;

class TContainerService_ExecuteStatement_presult {
 public:


  virtual ~TContainerService_ExecuteStatement_presult() throw();
   ::apache::hive::service::rpc::thrift::TExecuteStatementResp* success;

  _TContainerService_ExecuteStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_GetOperationStatus_args__isset {
  _TContainerService_GetOperationStatus_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_GetOperationStatus_args__isset;

class TContainerService_GetOperationStatus_args {
 public:

  TContainerService_GetOperationStatus_args(const TContainerService_GetOperationStatus_args&);
  TContainerService_GetOperationStatus_args& operator=(const TContainerService_GetOperationStatus_args&);
  TContainerService_GetOperationStatus_args() {
  }

  virtual ~TContainerService_GetOperationStatus_args() throw();
   ::apache::hive::service::rpc::thrift::TGetOperationStatusReq req;

  _TContainerService_GetOperationStatus_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& val);

  bool operator == (const TContainerService_GetOperationStatus_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetOperationStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetOperationStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_GetOperationStatus_pargs {
 public:


  virtual ~TContainerService_GetOperationStatus_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetOperationStatus_result__isset {
  _TContainerService_GetOperationStatus_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetOperationStatus_result__isset;

class TContainerService_GetOperationStatus_result {
 public:

  TContainerService_GetOperationStatus_result(const TContainerService_GetOperationStatus_result&);
  TContainerService_GetOperationStatus_result& operator=(const TContainerService_GetOperationStatus_result&);
  TContainerService_GetOperationStatus_result() {
  }

  virtual ~TContainerService_GetOperationStatus_result() throw();
   ::apache::hive::service::rpc::thrift::TGetOperationStatusResp success;

  _TContainerService_GetOperationStatus_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& val);

  bool operator == (const TContainerService_GetOperationStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetOperationStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetOperationStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetOperationStatus_presult__isset {
  _TContainerService_GetOperationStatus_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetOperationStatus_presult__isset;

class TContainerService_GetOperationStatus_presult {
 public:


  virtual ~TContainerService_GetOperationStatus_presult() throw();
   ::apache::hive::service::rpc::thrift::TGetOperationStatusResp* success;

  _TContainerService_GetOperationStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_CancelOperation_args__isset {
  _TContainerService_CancelOperation_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_CancelOperation_args__isset;

class TContainerService_CancelOperation_args {
 public:

  TContainerService_CancelOperation_args(const TContainerService_CancelOperation_args&);
  TContainerService_CancelOperation_args& operator=(const TContainerService_CancelOperation_args&);
  TContainerService_CancelOperation_args() {
  }

  virtual ~TContainerService_CancelOperation_args() throw();
   ::apache::hive::service::rpc::thrift::TCancelOperationReq req;

  _TContainerService_CancelOperation_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& val);

  bool operator == (const TContainerService_CancelOperation_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_CancelOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_CancelOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_CancelOperation_pargs {
 public:


  virtual ~TContainerService_CancelOperation_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TCancelOperationReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_CancelOperation_result__isset {
  _TContainerService_CancelOperation_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_CancelOperation_result__isset;

class TContainerService_CancelOperation_result {
 public:

  TContainerService_CancelOperation_result(const TContainerService_CancelOperation_result&);
  TContainerService_CancelOperation_result& operator=(const TContainerService_CancelOperation_result&);
  TContainerService_CancelOperation_result() {
  }

  virtual ~TContainerService_CancelOperation_result() throw();
   ::apache::hive::service::rpc::thrift::TCancelOperationResp success;

  _TContainerService_CancelOperation_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TCancelOperationResp& val);

  bool operator == (const TContainerService_CancelOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_CancelOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_CancelOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_CancelOperation_presult__isset {
  _TContainerService_CancelOperation_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_CancelOperation_presult__isset;

class TContainerService_CancelOperation_presult {
 public:


  virtual ~TContainerService_CancelOperation_presult() throw();
   ::apache::hive::service::rpc::thrift::TCancelOperationResp* success;

  _TContainerService_CancelOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_CloseOperation_args__isset {
  _TContainerService_CloseOperation_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_CloseOperation_args__isset;

class TContainerService_CloseOperation_args {
 public:

  TContainerService_CloseOperation_args(const TContainerService_CloseOperation_args&);
  TContainerService_CloseOperation_args& operator=(const TContainerService_CloseOperation_args&);
  TContainerService_CloseOperation_args() {
  }

  virtual ~TContainerService_CloseOperation_args() throw();
   ::apache::hive::service::rpc::thrift::TCloseOperationReq req;

  _TContainerService_CloseOperation_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& val);

  bool operator == (const TContainerService_CloseOperation_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_CloseOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_CloseOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_CloseOperation_pargs {
 public:


  virtual ~TContainerService_CloseOperation_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TCloseOperationReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_CloseOperation_result__isset {
  _TContainerService_CloseOperation_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_CloseOperation_result__isset;

class TContainerService_CloseOperation_result {
 public:

  TContainerService_CloseOperation_result(const TContainerService_CloseOperation_result&);
  TContainerService_CloseOperation_result& operator=(const TContainerService_CloseOperation_result&);
  TContainerService_CloseOperation_result() {
  }

  virtual ~TContainerService_CloseOperation_result() throw();
   ::apache::hive::service::rpc::thrift::TCloseOperationResp success;

  _TContainerService_CloseOperation_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TCloseOperationResp& val);

  bool operator == (const TContainerService_CloseOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_CloseOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_CloseOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_CloseOperation_presult__isset {
  _TContainerService_CloseOperation_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_CloseOperation_presult__isset;

class TContainerService_CloseOperation_presult {
 public:


  virtual ~TContainerService_CloseOperation_presult() throw();
   ::apache::hive::service::rpc::thrift::TCloseOperationResp* success;

  _TContainerService_CloseOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_GetResultSetMetadata_args__isset {
  _TContainerService_GetResultSetMetadata_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_GetResultSetMetadata_args__isset;

class TContainerService_GetResultSetMetadata_args {
 public:

  TContainerService_GetResultSetMetadata_args(const TContainerService_GetResultSetMetadata_args&);
  TContainerService_GetResultSetMetadata_args& operator=(const TContainerService_GetResultSetMetadata_args&);
  TContainerService_GetResultSetMetadata_args() {
  }

  virtual ~TContainerService_GetResultSetMetadata_args() throw();
   ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq req;

  _TContainerService_GetResultSetMetadata_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& val);

  bool operator == (const TContainerService_GetResultSetMetadata_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetResultSetMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetResultSetMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_GetResultSetMetadata_pargs {
 public:


  virtual ~TContainerService_GetResultSetMetadata_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetResultSetMetadata_result__isset {
  _TContainerService_GetResultSetMetadata_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetResultSetMetadata_result__isset;

class TContainerService_GetResultSetMetadata_result {
 public:

  TContainerService_GetResultSetMetadata_result(const TContainerService_GetResultSetMetadata_result&);
  TContainerService_GetResultSetMetadata_result& operator=(const TContainerService_GetResultSetMetadata_result&);
  TContainerService_GetResultSetMetadata_result() {
  }

  virtual ~TContainerService_GetResultSetMetadata_result() throw();
   ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp success;

  _TContainerService_GetResultSetMetadata_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& val);

  bool operator == (const TContainerService_GetResultSetMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetResultSetMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetResultSetMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetResultSetMetadata_presult__isset {
  _TContainerService_GetResultSetMetadata_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetResultSetMetadata_presult__isset;

class TContainerService_GetResultSetMetadata_presult {
 public:


  virtual ~TContainerService_GetResultSetMetadata_presult() throw();
   ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp* success;

  _TContainerService_GetResultSetMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_FetchResults_args__isset {
  _TContainerService_FetchResults_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_FetchResults_args__isset;

class TContainerService_FetchResults_args {
 public:

  TContainerService_FetchResults_args(const TContainerService_FetchResults_args&);
  TContainerService_FetchResults_args& operator=(const TContainerService_FetchResults_args&);
  TContainerService_FetchResults_args() {
  }

  virtual ~TContainerService_FetchResults_args() throw();
   ::apache::hive::service::rpc::thrift::TFetchResultsReq req;

  _TContainerService_FetchResults_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& val);

  bool operator == (const TContainerService_FetchResults_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_FetchResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_FetchResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_FetchResults_pargs {
 public:


  virtual ~TContainerService_FetchResults_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TFetchResultsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_FetchResults_result__isset {
  _TContainerService_FetchResults_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_FetchResults_result__isset;

class TContainerService_FetchResults_result {
 public:

  TContainerService_FetchResults_result(const TContainerService_FetchResults_result&);
  TContainerService_FetchResults_result& operator=(const TContainerService_FetchResults_result&);
  TContainerService_FetchResults_result() {
  }

  virtual ~TContainerService_FetchResults_result() throw();
   ::apache::hive::service::rpc::thrift::TFetchResultsResp success;

  _TContainerService_FetchResults_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TFetchResultsResp& val);

  bool operator == (const TContainerService_FetchResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_FetchResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_FetchResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_FetchResults_presult__isset {
  _TContainerService_FetchResults_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_FetchResults_presult__isset;

class TContainerService_FetchResults_presult {
 public:


  virtual ~TContainerService_FetchResults_presult() throw();
   ::apache::hive::service::rpc::thrift::TFetchResultsResp* success;

  _TContainerService_FetchResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TContainerService_GetQueryId_args__isset {
  _TContainerService_GetQueryId_args__isset() : req(false) {}
  bool req :1;
} _TContainerService_GetQueryId_args__isset;

class TContainerService_GetQueryId_args {
 public:

  TContainerService_GetQueryId_args(const TContainerService_GetQueryId_args&);
  TContainerService_GetQueryId_args& operator=(const TContainerService_GetQueryId_args&);
  TContainerService_GetQueryId_args() {
  }

  virtual ~TContainerService_GetQueryId_args() throw();
   ::apache::hive::service::rpc::thrift::TGetQueryIdReq req;

  _TContainerService_GetQueryId_args__isset __isset;

  void __set_req(const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& val);

  bool operator == (const TContainerService_GetQueryId_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetQueryId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetQueryId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TContainerService_GetQueryId_pargs {
 public:


  virtual ~TContainerService_GetQueryId_pargs() throw();
  const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetQueryId_result__isset {
  _TContainerService_GetQueryId_result__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetQueryId_result__isset;

class TContainerService_GetQueryId_result {
 public:

  TContainerService_GetQueryId_result(const TContainerService_GetQueryId_result&);
  TContainerService_GetQueryId_result& operator=(const TContainerService_GetQueryId_result&);
  TContainerService_GetQueryId_result() {
  }

  virtual ~TContainerService_GetQueryId_result() throw();
   ::apache::hive::service::rpc::thrift::TGetQueryIdResp success;

  _TContainerService_GetQueryId_result__isset __isset;

  void __set_success(const  ::apache::hive::service::rpc::thrift::TGetQueryIdResp& val);

  bool operator == (const TContainerService_GetQueryId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TContainerService_GetQueryId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TContainerService_GetQueryId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TContainerService_GetQueryId_presult__isset {
  _TContainerService_GetQueryId_presult__isset() : success(false) {}
  bool success :1;
} _TContainerService_GetQueryId_presult__isset;

class TContainerService_GetQueryId_presult {
 public:


  virtual ~TContainerService_GetQueryId_presult() throw();
   ::apache::hive::service::rpc::thrift::TGetQueryIdResp* success;

  _TContainerService_GetQueryId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TContainerServiceClient : virtual public TContainerServiceIf {
 public:
  TContainerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TContainerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& _return, const  ::apache::hive::service::rpc::thrift::TGetInfoReq& req);
  void send_GetInfo(const  ::apache::hive::service::rpc::thrift::TGetInfoReq& req);
  void recv_GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& _return);
  void ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& _return, const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& req);
  void send_ExecuteStatement(const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& req);
  void recv_ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& _return);
  void GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& _return, const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& req);
  void send_GetOperationStatus(const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& req);
  void recv_GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& _return);
  void CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& req);
  void send_CancelOperation(const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& req);
  void recv_CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& _return);
  void CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& req);
  void send_CloseOperation(const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& req);
  void recv_CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& _return);
  void GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& _return, const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& req);
  void send_GetResultSetMetadata(const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& req);
  void recv_GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& _return);
  void FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& _return, const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& req);
  void send_FetchResults(const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& req);
  void recv_FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& _return);
  void GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& _return, const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& req);
  void send_GetQueryId(const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& req);
  void recv_GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TContainerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TContainerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TContainerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetOperationStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResultSetMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FetchResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetQueryId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TContainerServiceProcessor(boost::shared_ptr<TContainerServiceIf> iface) :
    iface_(iface) {
    processMap_["GetInfo"] = &TContainerServiceProcessor::process_GetInfo;
    processMap_["ExecuteStatement"] = &TContainerServiceProcessor::process_ExecuteStatement;
    processMap_["GetOperationStatus"] = &TContainerServiceProcessor::process_GetOperationStatus;
    processMap_["CancelOperation"] = &TContainerServiceProcessor::process_CancelOperation;
    processMap_["CloseOperation"] = &TContainerServiceProcessor::process_CloseOperation;
    processMap_["GetResultSetMetadata"] = &TContainerServiceProcessor::process_GetResultSetMetadata;
    processMap_["FetchResults"] = &TContainerServiceProcessor::process_FetchResults;
    processMap_["GetQueryId"] = &TContainerServiceProcessor::process_GetQueryId;
  }

  virtual ~TContainerServiceProcessor() {}
};

class TContainerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TContainerServiceProcessorFactory(const ::boost::shared_ptr< TContainerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TContainerServiceIfFactory > handlerFactory_;
};

class TContainerServiceMultiface : virtual public TContainerServiceIf {
 public:
  TContainerServiceMultiface(std::vector<boost::shared_ptr<TContainerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TContainerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TContainerServiceIf> > ifaces_;
  TContainerServiceMultiface() {}
  void add(boost::shared_ptr<TContainerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& _return, const  ::apache::hive::service::rpc::thrift::TGetInfoReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetInfo(_return, req);
    }
    ifaces_[i]->GetInfo(_return, req);
    return;
  }

  void ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& _return, const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteStatement(_return, req);
    }
    ifaces_[i]->ExecuteStatement(_return, req);
    return;
  }

  void GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& _return, const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetOperationStatus(_return, req);
    }
    ifaces_[i]->GetOperationStatus(_return, req);
    return;
  }

  void CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelOperation(_return, req);
    }
    ifaces_[i]->CancelOperation(_return, req);
    return;
  }

  void CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseOperation(_return, req);
    }
    ifaces_[i]->CloseOperation(_return, req);
    return;
  }

  void GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& _return, const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResultSetMetadata(_return, req);
    }
    ifaces_[i]->GetResultSetMetadata(_return, req);
    return;
  }

  void FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& _return, const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FetchResults(_return, req);
    }
    ifaces_[i]->FetchResults(_return, req);
    return;
  }

  void GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& _return, const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetQueryId(_return, req);
    }
    ifaces_[i]->GetQueryId(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TContainerServiceConcurrentClient : virtual public TContainerServiceIf {
 public:
  TContainerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TContainerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& _return, const  ::apache::hive::service::rpc::thrift::TGetInfoReq& req);
  int32_t send_GetInfo(const  ::apache::hive::service::rpc::thrift::TGetInfoReq& req);
  void recv_GetInfo( ::apache::hive::service::rpc::thrift::TGetInfoResp& _return, const int32_t seqid);
  void ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& _return, const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& req);
  int32_t send_ExecuteStatement(const  ::apache::hive::service::rpc::thrift::TExecuteStatementReq& req);
  void recv_ExecuteStatement( ::apache::hive::service::rpc::thrift::TExecuteStatementResp& _return, const int32_t seqid);
  void GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& _return, const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& req);
  int32_t send_GetOperationStatus(const  ::apache::hive::service::rpc::thrift::TGetOperationStatusReq& req);
  void recv_GetOperationStatus( ::apache::hive::service::rpc::thrift::TGetOperationStatusResp& _return, const int32_t seqid);
  void CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& req);
  int32_t send_CancelOperation(const  ::apache::hive::service::rpc::thrift::TCancelOperationReq& req);
  void recv_CancelOperation( ::apache::hive::service::rpc::thrift::TCancelOperationResp& _return, const int32_t seqid);
  void CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& _return, const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& req);
  int32_t send_CloseOperation(const  ::apache::hive::service::rpc::thrift::TCloseOperationReq& req);
  void recv_CloseOperation( ::apache::hive::service::rpc::thrift::TCloseOperationResp& _return, const int32_t seqid);
  void GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& _return, const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& req);
  int32_t send_GetResultSetMetadata(const  ::apache::hive::service::rpc::thrift::TGetResultSetMetadataReq& req);
  void recv_GetResultSetMetadata( ::apache::hive::service::rpc::thrift::TGetResultSetMetadataResp& _return, const int32_t seqid);
  void FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& _return, const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& req);
  int32_t send_FetchResults(const  ::apache::hive::service::rpc::thrift::TFetchResultsReq& req);
  void recv_FetchResults( ::apache::hive::service::rpc::thrift::TFetchResultsResp& _return, const int32_t seqid);
  void GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& _return, const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& req);
  int32_t send_GetQueryId(const  ::apache::hive::service::rpc::thrift::TGetQueryIdReq& req);
  void recv_GetQueryId( ::apache::hive::service::rpc::thrift::TGetQueryIdResp& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
